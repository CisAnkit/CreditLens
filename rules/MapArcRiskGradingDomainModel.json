{
  "RuleName": "MapArcRiskGradingDomainModel",
  "ModuleId": "Tenant",
  "Description": "description",
  "RuleType": "CSharp",
  "ModelId": "ArcRiskGradingDomainModel",
  "ChainedRules": null,
  "Mode": null,
  "Source": "try\n{\t\n\tvar model = item.InternalModel;\n    var refProvider=Moodys.ERS.RO.Core.Registration.ContainerManager.Resolve<Moodys.ERS.RO.Core.RefData.IRefProvider>();\n    \n    model[\"Token\"] = \"P0GzBHpMhO5GtxwTRgUXhdmMzkebVnMs\";\n    \n    //----------------------------------------PPI\n    \n\tvar entity = item.Entity;\n    if(entity == null) return False();\n    \n    var financial = entity.Financial;\n    if(financial == null) return False();\n    \n    var riskCalcInfo = financial.GetRiskCalcInfos();\n    if(riskCalcInfo == null) return False();\n    \n    var riskCalcModels = financial.GetRiskCalcModels();\n    if(riskCalcModels == null) return False();\n    \n    var riskGradingSetting = entity.RiskGradingSetting;\n    if(riskGradingSetting == null) return False();\n    \n    var selectedModel = riskCalcModels?.FirstOrDefault<IRiskCalcModel>(Model => Model.TextID == riskCalcInfo.ModelId);\n    if(selectedModel == null) return False();\n    \n    var param = _requestContext.Resolve<IRunRiskCalcParam, Model>(new Model());\n    if(param == null) return False();\n    \n    param.InternalModel[\"RiskCalcModel\"] = selectedModel.InternalModel;\n    param.CountryCode = riskCalcInfo.Country;\n    param.USState = riskCalcInfo.Usstate;\n    param.PeerGroup = riskCalcInfo.PeerGroup as KeyValuePair<string, string>?;\n    param.BankCountryCode = riskCalcInfo.BankCountryCode;\n    var riskCalcResults = financial.RunRiskCalc(param, new int[] {riskGradingSetting.RiskCalcInfoStmtId ?? -1});\n\n\tif(riskCalcResults == null) return False();\n\tmodel[\"RiskCalcEdf\"] = (decimal?)riskCalcResults.SingleOrDefault(x => x.OutputId == \"AnnualizedEDF_\" + 1 + \"Yr\")?.Numval2/100;\n        \n    model[\"CountryOfRisk\"] = riskCalcInfo.Country;\n    model[\"GeopoliticalRiskCapAdjustmentPercentageRefData\"] = refProvider.GetRefModelData(\"GeopoliticalRiskCapAdjustmentPercentage\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"MacroeconomicRiskCapAdjustmentPercentageRefData\"] = refProvider.GetRefModelData(\"MacroeconomicRiskCapAdjustmentPercentage\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"MacroeconomicRiskCapWeightRefData\"] = refProvider.GetRefModelData(\"MacroeconomicRiskCapWeight\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"GeopoliticalRiskCapWeightRefData\"] = refProvider.GetRefModelData(\"GeopoliticalRiskCapWeight\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"IndustryChannel\"] = item.IndustryChannel;\n    \n    //----------------------------------------Peer Quartiles\n                  \n    model[\"ArcPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"ArcPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();     \n        \n    var rs = Context.RatingScenarios.Query.Where(x => x.EntityId == item.EntityId && x.Id == item.Id).FirstOrDefault(); \n    var statement = item.Entity.Financial?.HistoricalStatements?.All?.SingleOrDefault(stmt => stmt.StatementId.ToString() == rs.LatestStatementId.ToString());\n    List<int> years = new List<int>();    \n    years.Add(statement.StatementDate.Value.Year);   \n    var nextStatementId = statement.CashFlowReconcileId;\n    List<int?> nsi = new List<int?>();\n    nsi.Add(nextStatementId);\n\t\n  \twhile (nextStatementId != -1)\n    {   \n       statement = item.Entity.Financial?.HistoricalStatements?.All?.SingleOrDefault(stmt => stmt.StatementId.ToString() == nextStatementId.ToString());       \n       years.Add(statement.StatementDate.Value.Year);    \n       nextStatementId = statement.CashFlowReconcileId;\n       nsi.Add(nextStatementId);\n    }\n    \n    model[\"Debug\"] = years.Select(i => i.ToString()).Aggregate((s1, s2) => s1 + \", \" + s2);\n    model[\"Debug1\"] = nsi.Select(i => i.ToString()).Aggregate((s1, s2) => s1 + \", \" + s2);\n                \n    if (item.PMDecimal(\"% SALES GROWTH\") != null)\n       \tmodel[\"SalesGrowth\"] = item.PMDecimal(\"% SALES GROWTH\")[0]; \n    else\n      \tmodel[\"SalesGrowth\"] = null;\n\n \tif (item.PMDecimal(\"OP MARGIN\") != null)\n       model[\"NetOperatingProfitPercentage\"] = item.PMDecimal(\"OP MARGIN\")[0]; \n    else\n       model[\"NetOperatingProfitPercentage\"] = null;\n\n    if (item.PMDecimal(\"NET MARGIN\") != null)\n      \tmodel[\"NetProfitPercentage\"] = item.PMDecimal(\"NET MARGIN\")[0]; \n   \telse\n     \tmodel[\"NetProfitPercentage\"] = null;\n\n    if (item.PMDecimal(\"INT COVERAGE\") != null)\n     \tmodel[\"InterestCover\"] = item.PMDecimal(\"INT COVERAGE\")[0]; \n   \telse\n    \tmodel[\"InterestCover\"] = null;\n\n    if (item.PMDecimal(\"ReturnOnAssets\") != null)\n     \tmodel[\"ReturnOnAssetsPercentage\"] = item.PMDecimal(\"ReturnOnAssets\")[0]; \n   \telse\n      \tmodel[\"ReturnOnAssetsPercentage\"] = null;\n\t\n\tif (item.PMDecimal(\"Cash Ratio\") != null)\n    \tmodel[\"CashRatio\"] = item.PMDecimal(\"Cash Ratio\")[0];       \n   \telse\n      \tmodel[\"CashRatio\"] = null;\n    \n \tif (item.PMDecimal(\"QUICK\") != null)\n    \tmodel[\"QuickRatio\"] = item.PMDecimal(\"QUICK\")[0]; \n   \telse\n    \tmodel[\"QuickRatio\"] = null;\n\n    if (item.PMDecimal(\"CURRENT\") != null)\n     \tmodel[\"CurrentRatio\"] = item.PMDecimal(\"CURRENT\")[0]; \n   \telse\n    \tmodel[\"CurrentRatio\"] = null;\n\n    if (item.PMDecimal(\"Cash Conv Cycle\") != null)\n    \tmodel[\"CashConversionCycle\"] = Convert.ToInt32(item.PMDecimal(\"Cash Conv Cycle\")[0]); \n   \telse\n     \tmodel[\"CashConversionCycle\"] = null;\n\n    if (item.PMDecimal(\"A/R DAYS\") != null)\n     \tmodel[\"DaysSalesOutstanding\"] = Convert.ToInt32(item.PMDecimal(\"A/R DAYS\")[0]); \n   \telse\n      \tmodel[\"DaysSalesOutstanding\"] = null;\n\n    if (item.PMDecimal(\"INVENTORY DAYS\") != null)\n     \tmodel[\"DaysInventoryOutstanding\"] = Convert.ToInt32(item.PMDecimal(\"INVENTORY DAYS\")[0]); \n   \telse\n       \tmodel[\"DaysInventoryOutstanding\"] = null;\n\n    if (item.PMDecimal(\"A/P DAYS\") != null)\n      \tmodel[\"DaysPayableOutstanding\"] = Convert.ToInt32(item.PMDecimal(\"A/P DAYS\")[0]); \n   \telse\n       \tmodel[\"DaysPayableOutstanding\"] = null;\n\n    if (item.PMDecimal(\"Inventory/WC\") != null)\n       \tmodel[\"InventoryToWc\"] = Convert.ToInt32(item.PMDecimal(\"Inventory/WC\")[0]); \n  \telse\n      \tmodel[\"InventoryToWc\"] = null;\n\n    if (item.PMDecimal(\"Debt/NetWorth\") != null)\n      \tmodel[\"DebtToEquityRatio\"] = Convert.ToDecimal(item.PMDecimal(\"Debt/NetWorth\")[0]); \n   \telse\n    \tmodel[\"DebtToEquityRatio\"] = null;\n\n    if (item.PMDecimal(\"DEBT/TNW\") != null)\n       \tmodel[\"DebtToTnw\"] = item.PMDecimal(\"DEBT/TNW\")[0]; \n   \telse\n       \tmodel[\"DebtToTnw\"] = null;\n\n   \tif (item.PMDecimal(\"BF/TNW\") != null)\n        model[\"BorrowedFundsToEffectiveTnw\"] = item.PMDecimal(\"BF/TNW\")[0]; \n  \telse\n      \tmodel[\"BorrowedFundsToEffectiveTnw\"] = null;\n\n    if (item.PMDecimal(\"Debt/Assets\") != null)\n       \tmodel[\"DebtToAssetsRatio\"] = item.PMDecimal(\"Debt/Assets\")[0]; \n   \telse\n       \tmodel[\"DebtToAssetsRatio\"] = null;\n\n   \tif (item.PMDecimal(\"STDebt/TotalDebt\") != null)\n        model[\"ShortTermDebtToTotalDebt\"] = item.PMDecimal(\"STDebt/TotalDebt\")[0]; \n   \telse\n       \tmodel[\"ShortTermDebtToTotalDebt\"] = null;\n    \n    if (item.PMDecimal(\"STDebt/WC\") != null)\n        model[\"ShortTermDebtToWorkingCapital\"] = item.PMDecimal(\"STDebt/WC\")[0]; \n   \telse\n       \tmodel[\"ShortTermDebtToWorkingCapital\"] = null;\n    \n    if (item.PMDecimal(\"NetDebt/EBIT\") != null)\n         model[\"NetDebtToEbit\"] = item.PMDecimal(\"NetDebt/EBIT\")[0]; \n   \telse\n      \tmodel[\"NetDebtToEbit\"] = null;          \n        \n    //----------------------------------------Soft Factors\n        \n    model[\"StrategicSalesImportanceRefData\"] = refProvider.GetRefModelData(\"StrategicSalesImportance\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"YearsInBusinessWithAcerRefData\"] = refProvider.GetRefModelData(\"YearsInBusinessWithAcer\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"DaysBeyondDueDateRefData\"] = refProvider.GetRefModelData(\"DaysBeyondDueDate\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"SoftFactorFinancialsRefData\"] = refProvider.GetRefModelData(\"SoftFactorFinancials\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"CorporateStructureRefData\"] = refProvider.GetRefModelData(\"CorporateStructure\", Model.New(\"IsDeleted_\", false)).ToList();\n    \n    model[\"StrategicSalesImportance\"] = item.StrategicSalesImportance;\n    model[\"YearsInBusinessWithAcer\"] = item.YearsInBusinessWithAcer;\n    model[\"DaysBeyondDueDate\"] = item.DaysBeyondDueDate;\n    model[\"Financials\"] = item.Financials;\n    model[\"CorporateStructure\"] = item.CorporateStructure;\n    \n    return True();    \n}\ncatch (Exception ex)\n{\n    return False().AddData(\"ErrorMessage\", ex?.Message);\n}",
  "EffectiveDate": null,
  "RuleCategory": 3,
  "Inapplicable_": [],
  "WFId_": "00000000-0000-0000-0000-000000000000",
  "TaskId_": "00000000-0000-0000-0000-000000000000",
  "VersionId_": 48,
  "BaseVersionId_": 47,
  "IsLatestVersion_": true,
  "IsDeleted_": false,
  "StatusId_": 1,
  "CreatedBy_": "admin",
  "CreatedDate_": "2020-09-02T10:27:21.869201Z",
  "UpdatedBy_": "admin",
  "UpdatedDate_": "2020-09-17T10:08:05.605048Z",
  "t_": "Rules",
  "ContextUserId_": "admin",
  "IsValid_": true,
  "IsVisible_": true,
  "SnapshotId_": 0
}
