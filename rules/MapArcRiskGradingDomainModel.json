{
  "RuleName": "MapArcRiskGradingDomainModel",
  "ModuleId": "Tenant",
  "Description": "description",
  "RuleType": "CSharp",
  "ModelId": "ArcRiskGradingDomainModel",
  "ChainedRules": null,
  "Mode": null,
  "Source": "try\n{\t\n\tvar model = item.InternalModel;\n    var refProvider=Moodys.ERS.RO.Core.Registration.ContainerManager.Resolve<Moodys.ERS.RO.Core.RefData.IRefProvider>();\n    \n    model[\"Token\"] = \"P0GzBHpMhO5GtxwTRgUXhdmMzkebVnMs\";\n    \n    //----------------------------------------PPI\n    \n\tvar entity = item.Entity;\n    if(entity == null) return False();\n    \n    var financial = entity.Financial;\n    if(financial == null) return False();\n    \n    var riskCalcInfo = financial.GetRiskCalcInfos();\n    if(riskCalcInfo == null) return False();\n    \n    var riskCalcModels = financial.GetRiskCalcModels();\n    if(riskCalcModels == null) return False();\n    \n    var riskGradingSetting = entity.RiskGradingSetting;\n    if(riskGradingSetting == null) return False();\n    \n    var selectedModel = riskCalcModels?.FirstOrDefault<IRiskCalcModel>(Model => Model.TextID == riskCalcInfo.ModelId);\n    if(selectedModel == null) return False();\n    \n    var param = _requestContext.Resolve<IRunRiskCalcParam, Model>(new Model());\n    if(param == null) return False();\n    \n    param.InternalModel[\"RiskCalcModel\"] = selectedModel.InternalModel;\n    param.CountryCode = riskCalcInfo.Country;\n    param.USState = riskCalcInfo.Usstate;\n    param.PeerGroup = riskCalcInfo.PeerGroup as KeyValuePair<string, string>?;\n    param.BankCountryCode = riskCalcInfo.BankCountryCode;\n    var riskCalcResults = financial.RunRiskCalc(param, new int[] {riskGradingSetting.RiskCalcInfoStmtId ?? -1});\n\n\tif(riskCalcResults == null) return False();\n\tmodel[\"RiskCalcEdf\"] = (decimal?)riskCalcResults.SingleOrDefault(x => x.OutputId == \"AnnualizedEDF_\" + 1 + \"Yr\")?.Numval2/100;\n        \n    model[\"Country\"] = riskCalcInfo.Country;\n    model[\"GeopoliticalRiskCapAdjustmentPercentageRefData\"] = refProvider.GetRefModelData(\"GeopoliticalRiskCapAdjustmentPercentage\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"MacroeconomicRiskCapAdjustmentPercentageRefData\"] = refProvider.GetRefModelData(\"MacroeconomicRiskCapAdjustmentPercentage\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"MacroeconomicRiskCapWeightRefData\"] = refProvider.GetRefModelData(\"MacroeconomicRiskCapWeight\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"GeopoliticalRiskCapWeightRefData\"] = refProvider.GetRefModelData(\"GeopoliticalRiskCapWeight\", Model.New(\"IsDeleted_\", false)).ToList();\n    //model[\"PpiScoringMapRefData\"] = refProvider.GetRefModelData(\"PpiScoringMap\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"IndustryChannel\"] = item.IndustryChannel;\n    model[\"ArcRiskCapsRefData\"] = refProvider.GetRefModelData(\"ArcRiskCaps\", Model.New(\"IsDeleted_\", false)).ToList();\n    \n    //----------------------------------------Peer Quartiles\n        \n    model[\"SalesGrowthPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"SalesGrowthPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();;\n    model[\"NetOperatingProfitPercentagePeerQuartilesRefData\"] = refProvider.GetRefModelData(\"NetOperatingProfitPercentagePeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();;\n    model[\"NetProfitPercentagePeerQuartilesRefData\"] = refProvider.GetRefModelData(\"NetProfitPercentagePeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"InterestCoverPeerQurtilesRefData\"] = refProvider.GetRefModelData(\"InterestCoverPeerQurtiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"ReturnOnAssetsPercentageRefData\"] = refProvider.GetRefModelData(\"ReturnOnAssetsPercentage\", Model.New(\"IsDeleted_\", false)).ToList();\n\t\n    model[\"CashRatioPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"CashRatioPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"QuickRatioPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"QuickRatioPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"CurrentRatioPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"CurrentRatioPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    \n    model[\"CashConversionCyclePeerQuartilesRefData\"] = refProvider.GetRefModelData(\"CashConversionCyclePeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"DaysSalesOutstandingPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"DaysSalesOutstandingPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"DaysInventoryOutstandingPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"DaysInventoryOutstandingPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"DaysPayableOutstandingPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"DaysPayableOutstandingPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"InventoryWcPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"InventoryWcPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    \n    model[\"DebtToEquityRatioPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"DebtToEquityRatioPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"DebtToTnwPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"DebtToTnwPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"BorrowedFundsToEffectiveTnwPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"BorrowedFundsToEffectiveTnwPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"DebtToAssetsRatioPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"DebtToAssetsRatioPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"ShortTermDebtToTotalDebtPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"ShortTermDebtToTotalDebtPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"ShortTermDebtWcPeerQuartilesRefData\"] = refProvider.GetRefModelData(\"ShortTermDebtWcPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"NetDebtToEbitPeerQuartilesMapRefData\"] = refProvider.GetRefModelData(\"NetDebtToEbitPeerQuartiles\", Model.New(\"IsDeleted_\", false)).ToList();\n    \n    //model[\"ArcRegionsRefData\"] = refProvider.GetRefModelData(\"ArcRegions\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"ArcPeerIndustryRefData\"] = refProvider.GetRefModelData(\"ArcPeerIndustry\", Model.New(\"IsDeleted_\", false)).ToList();\n    \n    /*if (item.PMDouble(\"% SALES GROWTH\") != null)\n       \titem.SalesGrowth = Convert.ToDecimal(item.PMDouble(\"% SALES GROWTH\")[0]); \n    else\n      \titem.SalesGrowth = null;*/\n\n \t/*if (item.PMDouble(\"OP MARGIN\") != null)\n       item.NetOperatingProfitPercentage = Convert.ToDecimal(item.PMDouble(\"OP MARGIN\")[0]); \n    else\n       item.NetOperatingProfitPercentage = null;\n\n    if (item.PMDouble(\"NET MARGIN\") != null)\n      \titem.NetProfitPercentage = Convert.ToDecimal(item.PMDouble(\"NET MARGIN\")[0]); \n   \telse\n     \titem.NetProfitPercentage = null;\n\n    if (item.PMDouble(\"INT COVERAGE\") != null)\n     \titem.InterestCover = Convert.ToDecimal(item.PMDouble(\"INT COVERAGE\")[0]); \n   \telse\n    \titem.InterestCover = null;\n\n    /*if (item.PMDouble(\"RETURN_ON_ASSETS\") != null)\n     \titem.ReturnOnAssetsPercentage = Convert.ToDecimal(item.PMDouble(\"RETURN_ON_ASSETS\")[0]); \n   \telse\n      \titem.ReturnOnAssetsPercentage = null;*/\n       /* item.ReturnOnAssetsPercentage = Convert.ToDecimal(0.5);\n\t\n\tif (item.PMDouble(\"Cash Ratio\") != null)\n    \tmodel[\"CashRatio\"] = item.PMDecimal(\"Cash Ratio\")[0];       \n   \telse\n      \titem.CashRatio = null;\n    \n \tif (item.PMDouble(\"QUICK\") != null)\n    \titem.QuickRatio = Convert.ToDecimal(item.PMDouble(\"QUICK\")[0]); \n   \telse\n    \titem.QuickRatio = null;\n\n    if (item.PMDouble(\"CURRENT\") != null)\n     \titem.CurrentRatio = Convert.ToDecimal(item.PMDouble(\"CURRENT\")[0]); \n   \telse\n    \titem.CurrentRatio = null;\n\n    if (item.PMDouble(\"Cash Conv Cycle\") != null)\n    \titem.CashConversionCycle = Convert.ToInt32(item.PMDouble(\"Cash Conv Cycle\")[0]); \n   \telse\n     \titem.CashConversionCycle = null;\n\n    if (item.PMDouble(\"A/R DAYS\") != null)\n     \titem.DaysSalesOutstanding = Convert.ToInt32(item.PMDouble(\"A/R DAYS\")[0]); \n   \telse\n      \titem.DaysSalesOutstanding = null;\n\n    if (item.PMDouble(\"INVENTORY DAYS\") != null)\n     \titem.DaysInventoryOutstanding = Convert.ToInt32(item.PMDouble(\"INVENTORY DAYS\")[0]); \n   \telse\n       \titem.DaysInventoryOutstanding = null;\n\n    if (item.PMDouble(\"TRADE_PAYABLE_DAYS\") != null)\n      \titem.DaysPayableOutstanding = Convert.ToInt32(item.PMDouble(\"TRADE_PAYABLE_DAYS\")[0]); \n   \telse\n       \titem.DaysPayableOutstanding = null;\n\n    if (item.PMDouble(\"Inventory/WC\") != null)\n       \titem.InventoryToWc = Convert.ToInt32(item.PMDouble(\"Inventory/WC\")[0]); \n  \telse\n      \titem.InventoryToWc = null;\n\n    /*if (item.PMDouble(\"DEBT_TO_NET_WORTH\") != null)\n      \titem.DebtToEquityRatio = Convert.ToDecimal(item.PMDouble(\"DEBT_TO_NET_WORTH\")[0]); \n   \telse\n    \titem.DebtToEquityRatio = null;*/\n        /*item.DebtToEquityRatio = Convert.ToDecimal(0.5);\n\n    if (item.PMDouble(\"DEBT/TNW\") != null)\n       \titem.DebtToTnw = Convert.ToDecimal(item.PMDouble(\"DEBT/TNW\")[0]); \n   \telse\n       \titem.DebtToTnw = null;\n\n   \tif (item.PMDouble(\"BF/TNW\") != null)\n        item.BorrowedFundsToEffectiveTnw = Convert.ToDecimal(item.PMDouble(\"BF/TNW\")[0]); \n  \telse\n      \titem.BorrowedFundsToEffectiveTnw = null;\n\n    if (item.PMDouble(\"Debt/Assets\") != null)\n       \titem.DebtToAssetsRatio = Convert.ToDecimal(item.PMDouble(\"Debt/Assets\")[0]); \n   \telse\n       \titem.DebtToAssetsRatio = null;\n\n   \tif (item.PMDouble(\"STDebt/TotalDebt \") != null)\n        item.ShortTermDebtToTotalDebt = Convert.ToDecimal(item.PMDouble(\"STDebt/TotalDebt \")[0]); \n   \telse\n       \titem.ShortTermDebtToTotalDebt = null;\n\n    \n    if (item.PMDouble(\"STDebt/WC \") != null)\n        item.ShortTermDebtToWorkingCapital = Convert.ToDecimal(item.PMDouble(\"STDebt/WC \")[0]); \n   \telse\n       \titem.ShortTermDebtToWorkingCapital = null;\n    \n    if (item.PMDouble(\"NetDebt/EBIT\") != null)\n         item.NetDebtToEbit = Convert.ToDecimal(item.PMDouble(\"NetDebt/EBIT\")[0]); \n   \telse\n      \titem.NetDebtToEbit = null;          */\n        \n    //----------------------------------------Soft Factors\n        \n    model[\"StrategicSalesImportanceRefData\"] = refProvider.GetRefModelData(\"StrategicSalesImportance\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"YearsInBusinessWithAcerRefData\"] = refProvider.GetRefModelData(\"YearsInBusinessWithAcer\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"DaysBeyondDueDateRefData\"] = refProvider.GetRefModelData(\"DaysBeyondDueDate\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"SoftFactorFinancialsRefData\"] = refProvider.GetRefModelData(\"SoftFactorFinancials\", Model.New(\"IsDeleted_\", false)).ToList();\n    model[\"CorporateStructureRefData\"] = refProvider.GetRefModelData(\"CorporateStructure\", Model.New(\"IsDeleted_\", false)).ToList();\n    \n    model[\"StrategicSalesImportance\"] = item.StrategicSalesImportance;\n    model[\"YearsInBusinessWithAcer\"] = item.YearsInBusinessWithAcer;\n    model[\"DaysBeyondDueDate\"] = item.DaysBeyondDueDate;\n    model[\"Financials\"] = item.Financials;\n    model[\"CorporateStructure\"] = item.CorporateStructure;\n    \n    return True();    \n}\ncatch (Exception ex)\n{\n    return False().AddData(\"ErrorMessage\", ex?.Message);\n}",
  "EffectiveDate": null,
  "RuleCategory": 3,
  "Inapplicable_": [],
  "WFId_": "00000000-0000-0000-0000-000000000000",
  "TaskId_": "00000000-0000-0000-0000-000000000000",
  "VersionId_": 5,
  "BaseVersionId_": 4,
  "IsLatestVersion_": true,
  "IsDeleted_": false,
  "StatusId_": 1,
  "CreatedBy_": "admin",
  "CreatedDate_": "2020-09-02T10:27:21.869201Z",
  "UpdatedBy_": "admin",
  "UpdatedDate_": "2020-09-02T11:49:23.394883Z",
  "t_": "Rules",
  "ContextUserId_": "admin",
  "IsValid_": true,
  "IsVisible_": true,
  "SnapshotId_": 0
}